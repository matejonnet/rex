package org.jboss.pnc.scheduler.core.model;

import lombok.*;
import org.infinispan.protostream.annotations.ProtoFactory;
import org.infinispan.protostream.annotations.ProtoField;
import org.jboss.msc.service.ServiceName;

import java.util.*;
import java.util.stream.Collectors;

/**
 * Job(Service) is an entity that holds data of remotely executed task.
 *
 * ServiceController manipulates Service's data.
 *
 * Service has to be installed through BatchServiceInstaller that is provided by ServiceTarget. After installation, Service's
 * data is held by Infinispan cache inside ServiceRegistry/ServiceContainer.
 *
 * @author Jan Michalov <jmichalo@redhat.com>
 */
@Setter
@ToString
@AllArgsConstructor
@Builder(toBuilder = true)
public class Service {
    /**
     * Uniquely identifies a Service and serves as a key in Infinispan cache.
     */
    @Getter
    private final ServiceName name;

    /**
     * Holds data for communication with remote entity.
     *
     * f.e. to start/stop remote execution
     */
    private RemoteAPI remoteEndpoints;

    /**
     * ServiceController mode.
     */
    private Mode controllerMode;

    /**
     * Current state of a service. Default is ServiceController.State.ACTIVE.
     */
    private State state;

    /**
     * Services that are dependent on this job(Service).
     *
     * Parents of this Service.
     */
    @Singular
    @Getter
    private Set<ServiceName> dependants = new HashSet<>();

    /**
     * Number of unfinishedDependencies. Service can't remotely start if the number is positive.
     */
    private int unfinishedDependencies;

    @Singular
    @Getter
    private Set<ServiceName> dependencies = new HashSet<>();

    /**
     * Payload sent to remote entity.
     */
    private String payload;

    private StopFlag stopFlag;

    @Singular
    private List<ServerResponse> serverResponses = new ArrayList<>();

    /**
     * Used by infinispan to create .proto schema and marshaller values in the cache
     *
     * Use contructor generated by Lombok instead
     */
    @Deprecated
    @ProtoFactory
    public Service(String stringName, RemoteAPI remoteEndpoints, Mode controllerMode, State state, Set<String> stringDependants, int unfinishedDependencies, Set<String> stringDependencies, String payload, StopFlag stopFlag, List<ServerResponse> serverResponses) {
        this.name = ServiceName.parse(stringName);
        this.remoteEndpoints = remoteEndpoints;
        this.controllerMode = controllerMode;
        this.state = state;
        this.dependants = stringDependants.stream().map(ServiceName::parse).collect(Collectors.toSet());
        this.unfinishedDependencies = unfinishedDependencies;
        this.dependencies = stringDependencies.stream().map(ServiceName::parse).collect(Collectors.toSet());
        this.payload = payload;
        this.stopFlag = stopFlag;
        this.serverResponses = serverResponses;
    }

    public void incUnfinishedDependencies() {
        unfinishedDependencies++;
    }

    public void decUnfinishedDependencies() {
        unfinishedDependencies--;
    }

    @ProtoField(number = 1)
    public String getStringName() {
        return name.getCanonicalName();
    }

    @ProtoField(number = 5)
    public Set<String> getStringDependants() {
        return dependants.stream().map(ServiceName::getCanonicalName).collect(Collectors.toSet());
    }
    @ProtoField(number = 7)
    public Set<String> getStringDependencies() {
        return dependencies.stream().map(ServiceName::getCanonicalName).collect(Collectors.toSet());
    }

    @ProtoField(number = 2)
    public RemoteAPI getRemoteEndpoints() {
        return remoteEndpoints;
    }

    @ProtoField(number = 3)
    public Mode getControllerMode() {
        return controllerMode;
    }

    @ProtoField(number = 4)
    public State getState() {
        return state;
    }

    @ProtoField(number = 6, defaultValue = "-1")
    public int getUnfinishedDependencies() {
        return unfinishedDependencies;
    }

    @ProtoField(number = 8)
    public String getPayload() {
        return payload;
    }

    @ProtoField(number = 9)
    public StopFlag getStopFlag() {
        return stopFlag;
    }

    @ProtoField(number = 10)
    public List<ServerResponse> getServerResponses() {
        return serverResponses;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Service service = (Service) o;
        return unfinishedDependencies == service.unfinishedDependencies &&
                name.equals(service.name) &&
                Objects.equals(remoteEndpoints, service.remoteEndpoints) &&
                controllerMode == service.controllerMode &&
                state == service.state &&
                Objects.equals(dependants, service.dependants) &&
                Objects.equals(dependencies, service.dependencies) &&
                Objects.equals(payload, service.payload) &&
                stopFlag == service.stopFlag &&
                Objects.equals(serverResponses, service.serverResponses);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, remoteEndpoints, controllerMode, state, dependants, unfinishedDependencies, dependencies, payload, stopFlag, serverResponses);
    }
}
